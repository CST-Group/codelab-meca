################################  CONFIGURATION ################################
watch 5
learn --off
epmem --set learning off 
#smem --off
#log --level error

################## REDLIGHT cool name #######################
# if tempo chegada do smartcar for menor ou igual a tempo máximo e maior ou igual a tempo minimo ===>>MUDAR (tmin<= tsmartcar <=tmax)
# if tempo chegada do smartcar for menor que tempo minimo ==>>> MANTER (tsmartcar < tmin)

sp {propose*change_redlight
   (state <s> ^io.input-link <il>)
   (<il> ^CURRENT_PERCEPTION <cp>)
   (<cp> ^CONFIGURATION <conf>)
   (<conf> ^SMARTCAR_INFO <smartcar>)
   (<conf> ^TRAFFIC_LIGHT <tl>)
   (<tl> ^CURRENT_PHASE <current>)
   (<current> ^PHASE RED)
   (<current> ^ELAPSED_TIME <time>)
   (<tl> ^BOUNDS.MAX_TIME <max>)
   (<tl> ^BOUNDS.MIN_TIME <min>)
   (<smartcar> ^ESTIMATED_ARRIVAL.ESTIMATED_ARRIVAL <arrivalTime> >= <min>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name change_redlight)
}

sp {apply*change_redlight
   (state <s> ^operator <o>
 	     ^io <io>)
   (<io> ^input-link <il>
	^output-link <ol>)
   (<o> ^name change_redlight)
-->
   (<ol> ^SoarCommandChange <command>)
   (<command> ^productionName change_redlight)
}

sp {apply*change_redlight*remove
   (state <s> ^operator.name change_redlight
	     ^io.output-link <out>)
   (<out> ^SoarCommandChange <command>)
   (<command> ^status complete)
-->
   (<out> ^SoarCommandChange <command> -)
}

#if tempo chegada do smartcar for menor que tempo minimo ==>>> MANTER (tsmartcar < tmin)

sp {propose*keep_redlight
   (state <s> ^io.input-link <il>)
   (<il> ^CURRENT_PERCEPTION <cp>)
   (<cp> ^CONFIGURATION <conf>)
   (<conf> ^SMARTCAR_INFO <smartcar>)
   (<conf> ^TRAFFIC_LIGHT <tl>)
   (<tl> ^CURRENT_PHASE <current>)
   (<current> ^PHASE RED)
   (<current> ^ELAPSED_TIME <time>)
   (<tl> ^BOUNDS.MAX_TIME <max>)
   (<tl> ^BOUNDS.MIN_TIME <min>)
   (<smartcar> ^ESTIMATED_ARRIVAL.ESTIMATED_ARRIVAL <arrivalTime> < <min>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name keep_redlight)
}

sp {apply*keep_redlight
   (state <s> ^operator <o>
 	     ^io <io>)
   (<io> ^input-link <il>
	^output-link <ol>)
   (<o> ^name keep_redlight)
-->
   (<ol> ^SoarCommandKeep <command>)
   (<command> ^productionName keep_redlight)
}

sp {apply*keep_redlight*remove
   (state <s> ^operator.name keep_redlight
	     ^io.output-link <out>)
   (<out> ^SoarCommandKeep <command>)
   (<command> ^status complete)
-->
   (<out> ^SoarCommandKeep <command> -)
}


################## GREENLIGHT cool name #######################

#if tempo chegada do smartcar for maior que tempo máximo ===> MUDAR (tchegada > tmax)  

sp {propose*change_greenlight
   (state <s> ^io.input-link <il>)
   (<il> ^CURRENT_PERCEPTION <cp>)
   (<cp> ^CONFIGURATION <conf>)
   (<conf> ^SMARTCAR_INFO <smartcar>)
   (<conf> ^TRAFFIC_LIGHT <tl>)
   (<tl> ^CURRENT_PHASE <current>)
   (<current> ^PHASE GREEN)
   (<current> ^ELAPSED_TIME <time>)
   (<tl> ^BOUNDS.MAX_TIME <max>)
   (<tl> ^BOUNDS.MIN_TIME <min>)
   (<smartcar> ^ESTIMATED_ARRIVAL.ESTIMATED_ARRIVAL <arrivalTime> > <max>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name change_greenlight)
}

sp {apply*change_greenlight
   (state <s> ^operator <o>
	     ^io <io>)
   (<io> ^input-link <il>
	^output-link <ol>)
   (<o> ^name change_greenlight)
-->
   (<ol> ^SoarCommandChange <command>)
   (<command> ^productionName change_greenlight)
}

sp {apply*change_greenlight*remove
   (state <s> ^operator.name change_greenlight
	     ^io.output-link <out>)
   (<out> ^SoarCommandChange <command>)
   (<command> ^status complete)
-->
   (<out> ^SoarCommandChange <command> -)
}


#if tempo chegada do smartcar for menor ou igual a tempo máximo e maior ou igual a tempo minimo===> MANTER (tmin<= tchegada <=tmax)
#if tempo chegada do smartcar for menor que tempo minimo ==>>> MANTER (tchegada < tmin)

sp {propose*keep_greenlight
   (state <s> ^io.input-link <il>)
   (<il> ^CURRENT_PERCEPTION <cp>)
   (<cp> ^CONFIGURATION <conf>)
   (<conf> ^SMARTCAR_INFO <smartcar>)
   (<conf> ^TRAFFIC_LIGHT <tl>)
   (<tl> ^CURRENT_PHASE <current>)
   (<current> ^PHASE GREEN)
   (<current> ^ELAPSED_TIME <time>)
   (<tl> ^BOUNDS.MAX_TIME <max>)
   (<tl> ^BOUNDS.MIN_TIME <min>)
   (<smartcar> ^ESTIMATED_ARRIVAL.ESTIMATED_ARRIVAL <arrivalTime> <= <max>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name keep_greenlight)
}

sp {apply*keep_greenlight
   (state <s> ^operator <o>
	     ^io <io>)
   (<io> ^input-link <il>
	^output-link <ol>)
   (<o> ^name keep_greenlight)
-->
   (<ol> ^SoarCommandKeep <command>)
   (<command> ^productionName keep_greenlight)
}

sp {apply*keep_greenlight*remove
   (state <s> ^operator.name keep_greenlight
	     ^io.output-link <out>)
   (<out> ^SoarCommandKeep <command>)
   (<command> ^status complete)
-->
   (<out> ^SoarCommandKeep <command> -)
}

# HALT

sp {halt*condition
   (state <s> ^impasse no-change ^type state -^operator ^attribute operator)
-->
  #(write I2)
  #(halt)
   (interrupt)
}

######### se n tiver smartcar, n faça nada
sp {propose*do_nothing
   (state <s> ^io.input-link <il>)
   (<il> ^CURRENT_PERCEPTION <cp>)
   (<cp> ^CONFIGURATION <conf>)
   (<conf> ^NO_SMARTCAR.NO_SMARTCAR TRUE)
-->
   (<s> ^operator <o> + =)
   (<o> ^name do_nothing)
}

sp {apply*do_nothing
   (state <s> ^operator <o>
	     ^io <io>)
   (<io> ^input-link <il>
	^output-link <ol>)
   (<o> ^name do_nothing)
-->
   (<ol> ^SoarCommandDoNothing <command>)
   (<command> ^productionName do_nothing)
}

sp {apply*do_nothing*remove
   (state <s> ^operator.name do_nothing
	     ^io.output-link <out>)
   (<out> ^SoarCommandDoNothing <command>)
   (<command> ^status complete)
-->
   (<out> ^SoarCommandDoNothing <command> -)
}
